{"version":3,"sources":["../../../P2/webcam/src/App.js","../../../P2/webcam/src/serviceWorker.js","../../../P2/webcam/src/index.js"],"names":["Webcam","console","log","rVE","useRef","rTitle","useEffect","navigator","mediaDevices","videoStream","getUserMedia","video","facingMode","then","stream","videoTracks","getVideoTracks","current","setAttribute","label","onremovetrack","srcObject","catch","error","name","getTracks","forEach","tr","stop","alert","aSize","width","height","aFilter","aTrans","aShape","sz","ft","sh","react_default","a","createElement","ref","className","App_TBtn","onClick","i","length","style","handleSize","filter","transform","borderRadius","autoPlay","TBtn","props","Object","assign","type","children","App","_useState","useState","_useState2","slicedToArray","webcam","setWebcam","App_Webcam","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84dbd69e.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './App.scss';\n\nconst Webcam = () => {\n  console.log(\"Webcam::render\");\n  const rVE    = useRef(null);  // ref to Video Element\n  const rTitle = useRef(null);\n  // 'mediaDevices' not supported in mobile Android and Amazon Fire tablet\n\n  useEffect(() => {\n    const mediaAvailable = () => 'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices;\n\n    if (mediaAvailable()) {\n      const constraints = { video: { facingMode: 'user' }}; // 'environment'\n      let videoStream;\n      navigator.mediaDevices.getUserMedia(constraints)\n        .then(function(stream) {\n          const videoTracks = stream.getVideoTracks();\n          rTitle.current.setAttribute('data-src', 'Source:' + videoTracks[0].label);\n          console.log('Using video device: ' + videoTracks[0].label); // FaceTime HD Camera (Built-in)\n          stream.onremovetrack = function() {\n            console.log('Stream ended');\n          }\n          //window.stream = stream;\n          rVE.current.srcObject = stream;\n          videoStream = stream;\n        })\n        .catch(function(error) {\n          console.log(error.name);\n          if (typeof error !== 'undefined')\n            console.error(error);\n        });\n      return () => {  // unsure this part is needed ... \n        if (videoStream) {\n          const tracks = videoStream.getTracks();\n          tracks.forEach(tr => tr.stop());\n          videoStream = null;\n        }\n      }\n    } else {\n      alert(\"mediaDevices not supported!\");\n    }\n  }, [])\n\n  const aSize = [\n    {width: '70%',   height: '70%'},\n    {width: '50%',   height: '50%'},\n    {width: '300px', height: '200px'},\n    {width: '100%',  height: '100%'},\n  ];\n\n  const aFilter = [\n    \"sepia(100%)\",\n    \"grayscale(100%)\",\n    \"blur(4px)\",\n    \"brightness(3.5)\",\n    \"opacity(.4)\",\n    \"invert(75%)\",\n    \"drop-shadow(16px 16px 20px blue)\",\n    \"hue-rotate(90deg)\",\n  ];\n\n  const aTrans = [\n    \"rotateY(180deg)\",\n    \"rotateY(0deg)\",\n    \"rotateZ(90deg)\",\n    \"rotateZ(180deg)\",\n    \"rotateZ(-45deg)\",\n    \"rotateX(20deg) rotateY(-45deg)\",\n  ];\n\n  const aShape = [\n    \"50%\",\n    \"25%\",\n    \"5%\",\n    \"0\",\n  ];\n\n  const sz = useRef(0);  // size index\n  const ft = useRef(0);  // filter index\n  const tr = useRef(0);  // transform index\n  const sh = useRef(0);  // shape index\n\n  const handleSize = () => {\n    const i = sz.current++ % aSize.length\n    rVE.current.style.width  = aSize[i].width;\n    rVE.current.style.height = aSize[i].height;\n  }\n  const handleFilter = () => { rVE.current.style.filter       = aFilter[ft.current++ % aFilter.length]; }\n  const handleTrans  = () => { rVE.current.style.transform    = aTrans[ tr.current++ % aTrans.length]; }\n  const handleShape  = () => { rVE.current.style.borderRadius = aShape[ sh.current++ % aShape.length]; }\n  const handleReset  = () => { rVE.current.setAttribute(\"style\", \"\"); }\n\n  // controls\n  return (\n    <div ref={rTitle} className=\"vid-cont\">\n      <div className=\"btn-cont\">\n        <TBtn onClick={ () => handleSize() }>Toggle Sizes</TBtn>\n        <TBtn onClick={ () => handleFilter() }>Toggle Filters</TBtn>\n        <TBtn onClick={ () => handleTrans() }>Toggle Transforms</TBtn>\n        <TBtn onClick={ () => handleShape() }>Toggle Shapes</TBtn>\n        <TBtn onClick={ () => handleReset() }>Reset All</TBtn>\n      </div>\n      <video ref={rVE} autoPlay={true} className=\"vid-fw\" />\n    </div>\n  );\n}\n\nconst TBtn = props => <button type=\"button\" className=\"test-btn\" {...props}>{props.children}</button>;\n\nfunction App() {\n  const [webcam, setWebcam] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <h1>SpacetimeQ</h1>\n      <TBtn\n        onClick={ ()=>setWebcam(!webcam) }>\n        Webcam {webcam ? 'Off' : 'On'}\n      </TBtn>\n      {webcam && <Webcam />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}